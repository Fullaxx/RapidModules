#!/bin/bash
# Brett Kuskie
# fullaxx@gmail.com

set -e

NAME="docker"
VERS="24.0.9"
DCVERS="2.29.7"
DBXVERS="0.17.1"
PKG="${NAME}-${VERS}"
PKGREV=${PKGREV:-rev}
TMP="/tmp/${NAME}-mod-$$"
if [ -e ${TMP} ]; then echo "${TMP} exists, exiting..." >&2; exit 1; fi
if [ `id -u` != "0" ]; then echo "Got Root?"; exit 1; fi

# Download docker
DTARBALL="/tmp/newdocker-$$.tgz"
DURL="https://download.docker.com/linux/static/stable/x86_64/docker-${VERS}.tgz"
curl -L ${DURL} -o ${DTARBALL}

mkdir -p ${TMP}/usr ${TMP}/etc/rc.d
tar xvf ${DTARBALL} -C ${TMP}/usr
rm ${DTARBALL}
mv ${TMP}/usr/docker ${TMP}/usr/bin

# Download docker-compose
DCURL="https://github.com/docker/compose/releases/download/v${DCVERS}/docker-compose-linux-x86_64"
curl -L ${DCURL} -o ${TMP}/usr/bin/docker-compose

# Download bash-completion for docker
DBCURL="https://raw.githubusercontent.com/docker/cli/master/contrib/completion/bash/docker"
mkdir -p ${TMP}/etc/bash_completion.d
curl -L ${DBCURL} -o ${TMP}/etc/bash_completion.d/docker

# Download buildx plugin
# https://github.com/docker/buildx#installing
DBXURL="https://github.com/docker/buildx/releases/download/v${DBXVERS}/buildx-v${DBXVERS}.linux-amd64"
mkdir -p ${TMP}/usr/lib/docker/cli-plugins
curl -L ${DBXURL} -o ${TMP}/usr/lib/docker/cli-plugins/docker-buildx
chmod 0755 ${TMP}/usr/lib/docker/cli-plugins/docker-buildx

chown -R root:root ${TMP}/usr/bin
chmod -R 0755 ${TMP}/usr/bin
chmod 0755 ${TMP}/etc/bash_completion.d
chmod 0644 ${TMP}/etc/bash_completion.d/*

# Save RLB script
mkdir -p ${TMP}/usr/src/rlb
cp $0 ${TMP}/usr/src/rlb

cat << EOFF >${TMP}/etc/rc.d/rc.rl_docker
#!/bin/bash

docker_setup()
{
# /var/lib/docker should probably be backed by a HD
# but until the user specifies one, this will get us running
  if [ ! -d /var/lib/docker ]; then
    mkdir /var/lib/docker
  fi
  if ! mount | grep -q '/var/lib/docker' ; then
    if [ -L /dev/disk/by-label/varlibdocker ]; then
      /sbin/mount /dev/disk/by-label/varlibdocker /var/lib/docker
    else
      /sbin/mount tmpfs /var/lib/docker -t tmpfs
    fi
  fi
}

docker_start()
{
  echo "Starting Docker: /usr/bin/dockerd &"
  /usr/bin/dockerd >>/var/log/docker.log 2>&1 &
}

docker_stop()
{
  echo -n "Stopping dockerd "
  /usr/bin/killall dockerd 2>/dev/null
  while [ "\$?" == "0" ] ; do
    echo -n "."
    sleep 1
    /usr/bin/killall dockerd 2>/dev/null
  done
  echo " complete"
}

docker_restart()
{
  docker_stop
  sleep 1
  docker_start
}

case "\$1" in
  'setup') docker_setup ;;
  'start') docker_start ;;
  'stop') docker_stop ;;
  'restart') docker_restart ;;
  'status') docker ps ;;
  *) echo "usage \$0 <setup|start|stop|restart|status>"
esac

EOFF
chmod 0755 ${TMP}/etc/rc.d/rc.rl_docker

# https://docs.docker.com/registry/insecure/
# If we dont have certain root certs, allow pull over HTTP
# If you need this, rename this file to daemon.json
mkdir -p "${TMP}/etc/docker"
cat << EOFF >${TMP}/etc/docker/ir.daemon.json
{
  "insecure-registries": ["registry-1.docker.io"]
}
EOFF

# https://docs.docker.com/config/daemon/#configure-the-docker-daemon
# https://success.docker.com/article/how-do-i-enable-debug-logging-of-the-docker-daemon
cat << EOFF >${TMP}/etc/docker/debug.daemon.json
{
  "debug": true
}
EOFF

# https://docs.docker.com/storage/storagedriver/aufs-driver/
cat << EOFF >${TMP}/etc/docker/aufs.sd.daemon.json
{
  "storage-driver":"aufs"
}
EOFF

# https://docs.docker.com/storage/storagedriver/btrfs-driver/
cat << EOFF >${TMP}/etc/docker/btrfs.sd.daemon.json
{
  "storage-driver":"btrfs"
}
EOFF

# https://docs.docker.com/storage/storagedriver/device-mapper-driver/
cat << EOFF >${TMP}/etc/docker/dm.sd.daemon.json
{
  "storage-driver":"devicemapper",
  "storage-opts": [
    "dm.thinpooldev=/dev/mapper/thin-pool",
    "dm.use_deferred_deletion=true",
    "dm.use_deferred_removal=true"
  ]
}
EOFF

# https://docs.docker.com/storage/storagedriver/overlayfs-driver/
cat << EOFF >${TMP}/etc/docker/o2.sd.daemon.json
{
  "storage-driver":"overlay2"
}
EOFF

# https://serverfault.com/questions/948339/networking-between-kvm-vm-and-docker-container-on-same-host
cat << EOFF >${TMP}/etc/docker/networking.daemon.json
{
  "bridge":"br0",
  "iptables": false
}
EOFF

cat << EOFF >${TMP}/etc/docker/nvidia.daemon.json
{
  "default-runtime":"nvidia",
  "runtimes": {
    "nvidia": {
      "path": "nvidia-container-runtime",
      "runtimeArgs": []
    }
  }
}
EOFF

mkdir -p ${TMP}/usr/bin
cat << EOFF >${TMP}/usr/bin/rl_make_varlibdocker.sh
#!/bin/bash

if [ -z "\$1" ]; then
  >&2 echo "\$0: <PART>"
  exit 1
fi

PART="\$1"
if [ ! -b "\${PART}" ]; then
  >&2 echo "\${PART} is not a block device!"
  exit 2
fi

mkfs.ext4 -O 64bit -L varlibdocker \${PART}
EOFF
chmod 0744 ${TMP}/usr/bin/rl_make_varlibdocker.sh

cat << EOFF >${TMP}/usr/bin/rl_docker_check_storage.sh
#!/bin/bash

docker system df
echo
df -h /var/lib/docker
echo
du -shc /var/lib/docker/*
EOFF
chmod 0754 ${TMP}/usr/bin/rl_docker_check_storage.sh
chown root:docker ${TMP}/usr/bin/rl_docker_check_storage.sh

cat << EOFF >${TMP}/usr/bin/rl_docker_restart.sh
#!/bin/bash

/etc/rc.d/rc.rl_docker restart
EOFF
chmod 0744 ${TMP}/usr/bin/rl_docker_restart.sh

cat << EOFF >${TMP}/usr/bin/rl_docker_kick_upon_catastrophic_failure.sh
#!/bin/bash

LINESTOCHECK=\${LINESTOCHECK:-100}

while [ true ]; do
  ERRCOUNT=\`tail -n \${LINESTOCHECK} /var/log/docker.log | grep "too many open files" | wc -l\`
  if [ "\${ERRCOUNT}" != "0" ]; then
    /usr/bin/rl_docker_restart.sh
    sleep 60
  fi
  sleep 5
done
EOFF
chmod 0744 ${TMP}/usr/bin/rl_docker_kick_upon_catastrophic_failure.sh

# Package up the modules and clean up
dir2xzm ${TMP} ${PKG}-x86_64-${PKGREV}.xzm
rm -rf ${PKG}
rm -rf ${TMP}

# EOF
