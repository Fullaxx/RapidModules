#!/bin/bash
# Brett Kuskie
# fullaxx@gmail.com

set -e

bail()
{
  echo "$1: $?"
  exit 1
}

NAME="qtbase"
VERS="5.13.2"
PKG="${NAME}-${VERS}"
PKGREV=${PKGREV:-rev}
PKGDIR=${PKGDIR:-.}
TARBALL="${PKGDIR}/${NAME}-everywhere-src-${VERS}.tar.xz"
TMP="/tmp/${NAME}-mod-$$"
RLBFDIR=`dirname $0`
if [ "${RLBFDIR}" == "." ]; then RLBFDIR=`pwd`; fi
if [ -e ${TMP} ]; then echo "${TMP} exists, exiting..." >&2; exit 1; fi
if [ `id -u` != "0" ]; then echo "Got Root?"; exit 1; fi

EXAMPLES=${EXAMPLES:-no}
DOCS=${DOCS:-no}
CCACHE=${CCACHE:-no}

if [ ! -e ${TARBALL} ]; then echo "${TARBALL} doesnt exist, exiting..."; exit 1; fi
tar xvf ${TARBALL} ${EXCLUDE}
mv ${NAME}-everywhere-src-${VERS} ${PKG}
pushd ${PKG}

# Automatically determine the architecture we're building on:
if [ -z "${ARCH}" ]; then
  case "$( uname -m )" in
    #i?86) export ARCH=i486 ;;
    arm*) export ARCH=arm ;;
    # Unless ${ARCH} is already set, use uname -m for all other archs:
       *) export ARCH=$( uname -m ) ;;
  esac
fi

LIBDIRSUFFIX=""
if [ "${ARCH}" = "i486" ]; then
  SLKCFLAGS="-O2 -march=i486 -mtune=i686"
elif [ "${ARCH}" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"
elif [ "${ARCH}" = "s390" ]; then
  SLKCFLAGS="-O2"
elif [ "${ARCH}" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  LIBDIRSUFFIX="64"
  SLKLDFLAGS="-L/usr/lib64"
else
  SLKCFLAGS="-O2"
fi

# Default is no
if [ "${EXAMPLES}" == "yes" ]; then
  QTEXAMPLES="-examplesdir /usr/doc/${PKG}/examples"
else
  QTEXAMPLES="-nomake examples"
fi

# Default is no
if [ "${CCACHE}" == "yes" ]; then
  CCACHE="-ccache"
else
  unset CCACHE
fi

# Limit -reduce-relocations to ix86 and x86_64.
# https://bugreports.qt-project.org/browse/QTBUG-36129
if echo ${ARCH} | grep -q '\(i.86\|x86_64\)' 2>/dev/null; then
  RELOCATIONS="-reduce-relocations"
else
  RELOCATIONS=""
fi

# Use our custom compiler and linker flags:
sed -i -re "s,-O(2|3),${SLKCFLAGS}," mkspecs/common/gcc-base.conf
sed -i -e "/^QMAKE_LFLAGS\s/s,+=,+= ${SLKLDFLAGS},g" mkspecs/common/gcc-base.conf

# https://github.com/skarbat/picute/blob/master/qt5-configure-help.txt
# https://slackbuilds.org/repository/14.2/libraries/qt5/
# http://www.linuxfromscratch.org/blfs/view/svn/x/qt5.html

export CFLAGS="${SLKCFLAGS}"
export CXXFLAGS="${SLKCFLAGS} -std=c++14"
export OPENSOURCE_CXXFLAGS="${SLKCFLAGS}"
export QTDIR="${PWD}"
export LD_LIBRARY_PATH="${QTDIR}/qtbase/lib:${QTDIR}/qttools/lib:${LD_LIBRARY_PATH}"
export QT_PLUGIN_PATH="${QTDIR}/qtbase/plugins"
./configure -v \
-opensource \
-confirm-license \
-release \
-strip \
-c++std c++14 \
-prefix "/usr/lib${LIBDIRSUFFIX}/qt5" \
-sysconfdir "/etc/xdg" \
-headerdir "/usr/include/qt5" \
-libdir "/usr/lib${LIBDIRSUFFIX}" \
-bindir /usr/lib${LIBDIRSUFFIX}/qt5/bin \
-datadir /usr/share/qt5 \
-archdatadir /usr/lib${LIBDIRSUFFIX}/qt5 \
-docdir "/usr/doc/${PKG}" \
-system-libpng \
-system-libjpeg \
-system-zlib \
-system-sqlite \
-plugin-sql-sqlite \
-dbus-linked \
-openssl-linked \
-glib \
-icu \
-qpa xcb \
-xcb \
-no-separate-debug-info \
-no-pch \
-no-rpath \
-no-use-gold-linker \
${CCACHE} \
${RELOCATIONS} \
${QTEXAMPLES}

if [ -n "${PAUSEFORREVIEW}" ]; then
  echo
  echo "Press any key to continue ..."
  read PAUSEFORREVIEW
fi

# create the TMP directory, compile the code and install to ${TMP}
make ${MAKEALLCPUS}
mkdir ${TMP}
make install INSTALL_ROOT=${TMP}

# Install documentation. Default is not to install documentation.
if [ "${DOCS}" == "yes" ]; then
  echo "TBD"
fi

####################################################################################################
ln -s qt5 ${TMP}/usr/lib${LIBDIRSUFFIX}/qt-${VERS}

#mkdir -p ${TMP}/usr/bin
#for BIN in ${TMP}/usr/lib${LIBDIRSUFFIX}/qt5/bin/*; do
#  TMPFILE=$(echo ${BIN} | sed -e "s|$TMP||")
#  case $(basename ${BIN}) in
#    *.pl) ln -s ${TMPFILE} ${TMP}/usr/bin/$(basename ${BIN}) ;;
#       *) ln -s ${TMPFILE} ${TMP}/usr/bin/$(basename ${BIN})-qt5 ;;
#  esac
#done

# Create Environment variables
mkdir -p ${TMP}/etc/profile.d
sed -e "s|@LIBDIRSUFFIX@|${LIBDIRSUFFIX}|g" ${RLBFDIR}/RLBFILES/profile.d/qt5.sh \
  > ${TMP}/etc/profile.d/qt5.sh
sed -e "s|@LIBDIRSUFFIX@|${LIBDIRSUFFIX}|g" ${RLBFDIR}/RLBFILES/profile.d/qt5.csh \
  > ${TMP}/etc/profile.d/qt5.csh
chmod 0755 ${TMP}/etc/profile.d/*

# While we are at it, there isn't any reason to keep references to $PKG in the *.prl files.
for PRL in $(find ${TMP} -name "*\.prl"); do
  sed -e '/^QMAKE_PRL_BUILD_DIR/d' -i ${PRL}
done

# One more for the road.
sed -e "s|${PWD}/qtbase|/usr/lib${LIBDIRSUFFIX}/qt5|" \
  -i ${TMP}/usr/lib${LIBDIRSUFFIX}/qt5/mkspecs/modules/qt_lib_bootstrap_private.pri

# Remove executable bits from files.
find ${TMP} \( -name "*.qml" -o -name "*.app" \) -perm 755 -exec chmod 644 '{}' \;

# Some mandatory docs
mkdir -p ${TMP}/usr/doc/${PKG}
cp -v {header.*,LICENSE.*} ${TMP}/usr/doc/${PKG}/
####################################################################################################

# back out and copy this script to the module
popd
mkdir -p ${TMP}/usr/src/rlb
cp $0 ${TMP}/usr/src/rlb

# Make sure this module follows "the rules"
find ${TMP} -type d | xargs chmod -v 755
MANDIR=`find ${TMP} -type d -name man`
if [ x"${MANDIR}" != "x" ]; then
  find ${MANDIR} -type l -name "*.gz" | xargs -r gunzip -f
  find ${MANDIR} ! -type l -name "*.gz" | xargs -r gunzip
fi
find ${TMP} -type f | xargs file | grep ELF | cut -f1 -d: | xargs -r strip --strip-unneeded

# New Rules: No longer keep .la files
for PKGLIBDIR in ${TMP}/lib* ${TMP}/usr/lib*; do
  if [ -d ${PKGLIBDIR} ]; then
    find ${PKGLIBDIR} -type f -name "*.la" | xargs -r rm
  fi
done

# Package up the modules and clean up
dir2xzm ${TMP} ${PKG}-${ARCH}-${PKGREV}.xzm
rm -rf ${PKG}
rm -rf ${TMP}

# EOF
