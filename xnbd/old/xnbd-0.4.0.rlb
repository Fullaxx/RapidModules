#!/bin/bash
# Brett Kuskie
# fullaxx@gmail.com

NAME="xnbd"
VERS="0.4.0"
PKG="${NAME}-${VERS}"
PKGDIR=${PKGDIR:-/mnt/gz_vg-packages_lv/$NAME}
TARBALL="${PKGDIR}/${PKG}.tgz"
TMP=/tmp/$NAME-mod-$$
if [ -e $TMP ]; then echo "$TMP exists, exiting..." >&2; exit 1; fi

if [ ! -e $TARBALL ]; then echo "$TARBALL doesnt exist, exiting..."; exit 1; fi
tar xvf $TARBALL
cd $PKG/trunk

# Automatically determine the architecture we're building on:
if [ -z "$ARCH" ]; then
  case "$( uname -m )" in
    #i?86) export ARCH=i486 ;;
    arm*) export ARCH=arm ;;
    # Unless $ARCH is already set, use uname -m for all other archs:
       *) export ARCH=$( uname -m ) ;;
  esac
fi

LIBDIRSUFFIX=""
if [ "$ARCH" = "i486" ]; then
  SLKCFLAGS="-O2 -march=i486 -mtune=i686"
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"
elif [ "$ARCH" = "s390" ]; then
  SLKCFLAGS="-O2"
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX="64"
else
  SLKCFLAGS="-O2"
fi

ln -s Makefile.am Makefile.in
ln -s Makefile.am doc/Makefile.in
ln -s Makefile.am lib/Makefile.in

aclocal
autoheader
automake --force-missing --add-missing
autoconf -i

./configure

gcc -Wall -std=c99 xnbd_bgctl.c xnbd_common.c xnbd_proxy*.c xnbd_cachestat.c lib/*.c -o xnbd_bgctl \
-I/usr/include/glib-2.0 -I/usr/lib64/glib-2.0/include -lgthread-2.0 -lglib-2.0 -lpthread -lm || exit 1

gcc -Wall -std=c99 xnbd_server.c xnbd_common.c xnbd_proxy*.c xnbd_cachestat.c xnbd_target_cow_lzo.c xnbd_target.c lib/*.c -o xnbd_server \
-I/usr/include/glib-2.0 -I/usr/lib64/glib-2.0/include -lgthread-2.0 -lglib-2.0 -lpthread -lm || exit 1

gcc -Wall -std=c99 xnbd_client.c xnbd_common.c xnbd_proxy*.c xnbd_cachestat.c xnbd_target_cow_lzo.c xnbd_target.c lib/*.c -o xnbd_client \
-I/usr/include/glib-2.0 -I/usr/lib64/glib-2.0/include -lgthread-2.0 -lglib-2.0 -lpthread -lm || exit 1

gcc -Wall -std=c99 xnbd_cachestatdump.c xnbd_common.c xnbd_proxy*.c xnbd_cachestat.c xnbd_target_cow_lzo.c xnbd_target.c lib/*.c -o xnbd_cachestatdump \
-I/usr/include/glib-2.0 -I/usr/lib64/glib-2.0/include -lgthread-2.0 -lglib-2.0 -lpthread -lm || exit 1

gcc -Wall -std=c99 xnbd_speedtest.c xnbd_common.c xnbd_proxy*.c xnbd_cachestat.c xnbd_target_cow_lzo.c xnbd_target.c lib/*.c -o xnbd_speedtest \
-I/usr/include/glib-2.0 -I/usr/lib64/glib-2.0/include -lgthread-2.0 -lglib-2.0 -lpthread -lm || exit 1

gcc -Wall -std=c99 xnbd_watchdog.c xnbd_common.c xnbd_proxy*.c xnbd_cachestat.c xnbd_target_cow_lzo.c xnbd_target.c lib/*.c -o xnbd_watchdog \
-I/usr/include/glib-2.0 -I/usr/lib64/glib-2.0/include -lgthread-2.0 -lglib-2.0 -lpthread -lm || exit 1

gcc -Wall -std=c99 xnbd_wrapper.c xnbd_common.c xnbd_proxy*.c xnbd_cachestat.c xnbd_target_cow_lzo.c xnbd_target.c lib/*.c -o xnbd_wrapper \
-I/usr/include/glib-2.0 -I/usr/lib64/glib-2.0/include -lgthread-2.0 -lglib-2.0 -lpthread -lm -ljansson || exit 1

# Install the binaries
mkdir -p $TMP/usr/bin
cp -v xnbd_bgctl xnbd_server xnbd_client xnbd_cachestatdump xnbd_speedtest xnbd_watchdog xnbd_wrapper $TMP/usr/bin/

# back out and copy this script to the module
cd ../../
mkdir -p $TMP/usr/src/rlb
cp $0 $TMP/usr/src/rlb/

# Make sure this module follows "the rules"
find $TMP -type d | xargs chmod -v 755
MANDIR=`find $TMP -type d -name man`
if [ x"$MANDIR" != "x" ]; then
  find $MANDIR -type l -name "*.gz" | xargs -r gunzip -f
  find $MANDIR ! -type l -name "*.gz" | xargs -r gunzip
fi
find $TMP -type f | xargs file | grep ELF | cut -f1 -d: | xargs -r strip --strip-unneeded

# Package up the modules and clean up
dir2xzm $TMP $PKG-$ARCH-num.xzm
rm -rf $PKG
rm -rf $TMP

# EOF
