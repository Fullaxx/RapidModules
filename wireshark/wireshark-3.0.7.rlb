#!/bin/bash
# Brett Kuskie
# fullaxx@gmail.com

set -e

NAME="wireshark"
VERS="3.0.7"
PKG="${NAME}-${VERS}"
PKGREV=${PKGREV:-rev}
PKGDIR=${PKGDIR:-.}
TARBALL="${PKGDIR}/${PKG}.tar.xz"
TMP="/tmp/${NAME}-mod-$$"
if [ -e ${TMP} ]; then echo "${TMP} exists, exiting..." >&2; exit 1; fi
if [ `id -u` != "0" ]; then echo "Got Root?"; exit 1; fi

if [ ! -e ${TARBALL} ]; then echo "${TARBALL} doesnt exist, exiting..."; exit 1; fi
tar xvf ${TARBALL}
pushd ${PKG}

# Automatically determine the architecture we're building on:
if [ -z "${ARCH}" ]; then
  case "$( uname -m )" in
    #i?86) export ARCH=i486 ;;
    arm*) export ARCH=arm ;;
    # Unless ${ARCH} is already set, use uname -m for all other archs:
       *) export ARCH=$( uname -m ) ;;
  esac
fi

LIBDIRSUFFIX=""
if [ "${ARCH}" = "i486" ]; then
  SLKCFLAGS="-O2 -march=i486 -mtune=i686"
elif [ "${ARCH}" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"
elif [ "${ARCH}" = "s390" ]; then
  SLKCFLAGS="-O2"
elif [ "${ARCH}" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  LIBDIRSUFFIX="64"
else
  SLKCFLAGS="-O2"
fi

# XXX REMOVE Install docs in the right place
# XXX REMOVE sed -i "s|\${GR_DATA_DIR}/doc|doc|" CMakeLists.txt
# WS 3.0.0 needs QT5

# /usr/lib64/cmake/Qt5/Qt5Config.cmake
# /usr/lib64/cmake/Qt5Core/Qt5CoreConfigExtrasMkspecDir.cmake

# export CMAKE_PREFIX_PATH="/usr/lib64/qt5:${CMAKE_PREFIX_PATH}"
# export CMAKE_PREFIX_PATH="/usr/lib64/cmake/Qt5Core/:${CMAKE_PREFIX_PATH}"
# export CMAKE_MODULE_PATH="/usr/lib64/cmake/Qt5Core/"

export QT5_BASE_DIR="/usr/lib64/qt5"

mkdir build
cd build
cmake \
-DCMAKE_C_FLAGS:STRING="${SLKCFLAGS}" \
-DCMAKE_CXX_FLAGS:STRING="${SLKCFLAGS}" \
-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=${PKG} \
-DLIB_SUFFIX=${LIBDIRSUFFIX} \
-DBUILD_tfshark=OFF \
-DCMAKE_BUILD_TYPE=Release ..

# -DBUILD_tfshark=ON
# -G Ninja

# -DQT5_BASE_DIR="/usr/lib64/qt5/" \
# -DCMAKE_PREFIX_PATH="/usr/lib64/cmake/Qt5/:${CMAKE_PREFIX_PATH}" \
# -DCMAKE_MODULE_PATH="/usr/lib64/cmake/Qt5/" \
# -DCMAKE_MODULE_PATH="/usr/lib64/cmake/Qt5Core/" \
#-DSYSCONFDIR=/etc \

if [ -n "${PAUSEFORREVIEW}" ]; then
  echo
  echo "Press any key to continue ..."
  read PAUSEFORREVIEW
fi

make ${MAKEALLCPUS}
# ninja
mkdir ${TMP}
make install DESTDIR=${TMP}
# ninja install DESTDIR=${TMP}
cd ..

# Documentation
# XXX FIXME cp COPYING README.md README.hacking CHANGELOG.md ${TMP}/usr/doc/${PKG}/

# back out and copy this script to the module
popd
mkdir -p ${TMP}/usr/src/rlb
cp $0 ${TMP}/usr/src/rlb

# Make sure this module follows "the rules"
find ${TMP} -type d | xargs chmod -v 755
MANDIR=`find ${TMP} -type d -name man`
if [ x"${MANDIR}" != "x" ]; then
  find ${MANDIR} -type l -name "*.gz" | xargs -r gunzip -f
  find ${MANDIR} ! -type l -name "*.gz" | xargs -r gunzip
fi
find ${TMP} -type f | xargs file | grep ELF | cut -f1 -d: | xargs -r strip --strip-unneeded

# New Rules: No longer keep .la files
for PKGLIBDIR in ${TMP}/lib* ${TMP}/usr/lib*; do
  if [ -d ${PKGLIBDIR} ]; then
    find ${PKGLIBDIR} -type f -name "*.la" | xargs -r rm
  fi
done

# Package up the modules and clean up
dir2xzm ${TMP} ${PKG}-${ARCH}-${PKGREV}.xzm
rm -rf ${PKG}
rm -rf ${TMP}

# EOF
