#!/bin/bash
# Brett Kuskie
# fullaxx@gmail.com

set -e

NAME="wireshark"
VERS="3.6.24"
PKG="${NAME}-${VERS}"
PKGREV=${PKGREV:-rev}
PKGDIR=${PKGDIR:-.}
TARBALL="${PKGDIR}/${PKG}.tar.xz"
TMP="/tmp/${NAME}-mod-$$"
RLBFDIR=`dirname $0`
if [ "${RLBFDIR}" == "." ]; then RLBFDIR=`pwd`; fi
if [ -e ${TMP} ]; then echo "${TMP} exists, exiting..." >&2; exit 1; fi
if [ `id -u` != "0" ]; then echo "Got Root?"; exit 1; fi

# Activate doxygen (to build API documentation)
if [ ! -x /usr/bin/doxygen ]; then
  echo "I need /usr/bin/doxygen from doxygen-*.txz to build API documentation"
  exit 1
fi

# Activate asciidoctor (to build man pages)
if [ ! -x /usr/bin/asciidoctor ]; then
  echo "I need /usr/bin/asciidoctor from rubygem-asciidoctor-*.txz to build man pagess"
  exit 1
fi

# Activate ruby (to use asciidoctor)
if [ ! -x /usr/bin/ruby ]; then
  echo "I need /usr/bin/ruby from ruby-*.txz to use asciidoctor"
  exit 1
fi

if [ ! -e ${TARBALL} ]; then echo "${TARBALL} doesnt exist, exiting..."; exit 1; fi
tar xvf ${TARBALL}
pushd ${PKG}

# Automatically determine the architecture we're building on:
if [ -z "${ARCH}" ]; then
  case "$( uname -m )" in
    #i?86) export ARCH=i486 ;;
    arm*) export ARCH=arm ;;
    # Unless ${ARCH} is already set, use uname -m for all other archs:
       *) export ARCH=$( uname -m ) ;;
  esac
fi

LIBDIRSUFFIX=""
if [ "${ARCH}" = "i486" ]; then
  SLKCFLAGS="-O2 -march=i486 -mtune=i686"
elif [ "${ARCH}" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"
elif [ "${ARCH}" = "s390" ]; then
  SLKCFLAGS="-O2"
elif [ "${ARCH}" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  LIBDIRSUFFIX="64"
else
  SLKCFLAGS="-O2"
fi

export QT5_BASE_DIR="/usr/lib64/qt5"

mkdir build
cd build
cmake \
-DCMAKE_C_FLAGS:STRING="${SLKCFLAGS}" \
-DCMAKE_CXX_FLAGS:STRING="${SLKCFLAGS}" \
-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_MANDIR=/usr/man \
-DCMAKE_INSTALL_DOCDIR=/usr/doc/${PKG} \
-DBUILD_tfshark=OFF \
-DCMAKE_BUILD_TYPE=Release ..

# -DLIB_SUFFIX=${LIBDIRSUFFIX}
# -DBUILD_tfshark=ON
# -G Ninja

if [ -n "${PAUSEFORREVIEW}" ]; then
  echo
  echo "Press any key to continue ..."
  read PAUSEFORREVIEW
fi

make ${MAKEALLCPUS}
# ninja
doxygen doxygen.cfg
mkdir ${TMP}
make install DESTDIR=${TMP}
# ninja install DESTDIR=${TMP}
mkdir -p ${TMP}/usr/doc/${PKG}
cp -r wsar_html ${TMP}/usr/doc/${PKG}/htmldocs
cd ..

# Documentation
# mkdir -p ${TMP}/usr/doc/${PKG}
cp AUTHORS* COPYING ChangeLog INSTALL NEWS README.* doc/README.* doc/randpkt.txt ${TMP}/usr/doc/${PKG}/
( cd ${TMP}/usr/doc/${PKG}; for PAGE in *.html; do if [ -f ${TMP}/usr/share/wireshark/${PAGE} ]; then rm ${PAGE}; fi; done )

# WTF is this dir with a space in it?? really?
mv ${TMP}/usr/share/wireshark/profiles/No\ Reassembly ${TMP}/usr/share/wireshark/profiles/NoReassembly

# back out and copy this script to the module
popd
mkdir -p ${TMP}/usr/src/rlb
cp $0 ${TMP}/usr/src/rlb

# Make sure this module follows "the rules"
find ${TMP} -type d | xargs chmod -v 755
MANDIR=`find ${TMP} -type d -name man`
if [ x"${MANDIR}" != "x" ]; then
  find ${MANDIR} -type l -name "*.gz" | xargs -r gunzip -f
  find ${MANDIR} ! -type l -name "*.gz" | xargs -r gunzip
fi
find ${TMP} -type f | xargs file | grep ELF | cut -f1 -d: | xargs -r strip --strip-unneeded

# New Rules: No longer keep .la files
for PKGLIBDIR in ${TMP}/lib* ${TMP}/usr/lib*; do
  if [ -d ${PKGLIBDIR} ]; then
    find ${PKGLIBDIR} -type f -name "*.la" | xargs -r rm
  fi
done

# Package up the modules and clean up
dir2xzm ${TMP} ${PKG}-${ARCH}-${PKGREV}.xzm
rm -rf ${PKG}
rm -rf ${TMP}

# Make tshark module
${RLBFDIR}/make_tshark_modules.sh ${PKG}-${ARCH}-${PKGREV}.xzm

# EOF
